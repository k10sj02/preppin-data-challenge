Category,Function/Method/Concept,Weeks Used,Regex,May Overcount,May Undercount
Charts,Bokeh,2020:  W09,\n(?:.*from bokeh.*|.*import bokeh.*),,
Charts,matplotlib,2021:  W47  2022:  W22,\n(?:.*from matplotlib.*|.*import matplotlib.*),,
Charts,Seaborn,2021:  W01  W12,\n(?:.*from seaborn.*|.*import seaborn.*),,
Other,decimal module,2021:  W11  2022:  W06,\n(?:.*import decimal.*|.*from decimal.*),,
Other,f strings / format,2019:  W04  2020:  W08  2021:  W12  W17  W36  W41  W42  W46  W51  2022:  W13  W16  W27  W28,f'\S.*,,
Other,Function,2020:  W04  2021:  W08  W09  W10  W34  W35  W42  W51  2022:  W27,\ndef .*,,
Other,Function (recursive),2021:  W10,\ndef .*,1,
Other,"list methods (sort, reverse, append, union, etc.)",2021:  W31  W34  W15,.*sort\(.*|.*reverse\(.*|.*append\(.*.*union\(.*,,
Other,list/dict comprehension,2019:  W04  2020:  W01  W02  W03  W04  W06  W07  W08  2021:  W04  W07  W08  W10  W11  W12  W13  W14  W16  W20  W22  W24  W25  W26  W27  W28  W29  W30  W34  W37  W38  W41  W43  W45  W46  W47  W48  W50  W51  2022:  W12  W15  W16  W28,".*\[.{,50} for .{,20} in .{30}\].*|.*\{.{,50} for .{,20} in .{30}\}.*",,
Other,Loops,2020:  W01  2021:  W27  W33  W47  W51  2022:  W22  W27,\n\s*(?:for|while)\s,,
Other,Mapping values with dictionary,2020:  W04  W08  W09  2021:  W01  W14  W29  W30  W32  W34  W43  W47  W48  2022:  W02  W04  W05  W10  W16  W17  W19  W20  W22  W23,\.replace\((?:\{|[A-Za-z]+),1,
Other,sets,2022:  W28,set\(,,
Other,unpacking a sequence *,2021:  W41,[^A-Za-z\d]\*,1,
Other,user input,2022:  W13,\sinput\(,1,
Other,zip,2020:  W02  2021:  W07  W10  W11  W12  W24  W37  W43  2022:  W10  W15  W19  W20  W22,\szip\(,,
Pandas - Aggregation,"Boolean aggregation(any, all)",2022:  W14,(?:\s|')(?:any|all)(?:\(|'),1,
Pandas - Aggregation,"Cumulative aggregation(cumcount, cumsum, etc.)",2020:  W03  2021:  W49  W50  2022:  W13  W15,cummax|cummin|cumprod|cumsum|cumcount,,
Pandas - Aggregation,Named Aggregation,2020:  W03  W05  W06  W07  2021:  W02  W06  W07  W17  W18  W20  W22  W24  W25  W26  W28  W30  W32  W34  W36  W38  W46  W47  W49  W51  2022:  W03  W04  W06  W09  W19  W27,\.agg\(,,
Pandas - Aggregation,rank,2020:  W03  W05  W09  2021:  W04  W06  W08  W09  W13  W14  W16  W21  W25  W28  W47  2022:  W05  W06  W14  W24,(?:\s|')rank(?:\(|'),1,
Pandas - Aggregation,groupby with filter,2021:  W23  2022:  W06,\.groupby\(.*?\)\s*\.filter\(,,
Pandas - Aggregation,transform,2020:  W04  W09  2021:  W09  W17  W21  W33  W35  W42  W49  W52  2022:  W02  W04  W05  W09  W11  W14  W15  W17  W20,\.transform\(,,
Pandas - Dates,Date Calculations,2019:  W04  2020:  W04  2021:  W02  W08  W10  W18  W21  W33  2022:  W01  W02  W15,[manual],,
Pandas - Dates,DateOffset / offsets,2019:  W04  2020:  W09  2021:  W37  W50  W15,offsets|dateoffset,,
Pandas - Dates,"Dateparts (dt.month, dt.quarter, etc.)",2019:  W04  2020:  W04  W06  W09  2021:  W01  W03  W12  W15  W18  W29  W32  W36  W42  W47  W49  W50  2022:  W01  W02  W09  W15,\.dt.\(?:asfreq|ceil|components|date|day|day_name|day_of_week|day_of_year|dayofweek|dayofyear|days|days_in_month|daysinmonth|end_time|floor|freq|hour|is_leap_year|is_month_end|is_month_start|is_quarter_end|is_quarter_start|is_year_end|is_year_start|isocalendar|microsecond|microseconds|minute|month|month_name|nanosecond|nanoseconds|normalize|quarter|qyear|round|second|seconds|start_time|time|timetz|to_period|to_pydatetime|total_seconds|tz|week|weekday|weekofyear|year),,
Pandas - Dates,date_range,2021:  W24  W37  W42  W44  W15  2022:  W28,\.date_range\(,,
Pandas - Dates,dt.strftime,2020:  W02  W06  2021:  W12  W24  W28  W49,\.dt\.strftime\(,,
Pandas - Dates,dt.strptime,2020:  W02  W03,\.dt\.strptime\(,,
Pandas - Dates,read_csv or read_excel with parse_dates,2021:  W02  W05  W16  W26  W31  W32  W39  W42  W49  W51  2022:  W01  W02  W24  W27  W28,"\.(?:read_csv|read_excel)\(*?\, parse_dates\=.*?\)",,
Pandas - Dates,timedelta / to_timedelta / relativedelta,2020:  W04  W07  2021:  W26  W33,timedelta|to_timedelta|relativedelta,,
Pandas - Dates,to_datetime,2020:  W04  W09  2021:  W12  W21  W28  W29  W30  W33  W45  2022:  W07  W12  W18,to_datetime|to_timestamp,,
Pandas - Dates,to_period,2022:  W15,to_period,,
Pandas - Dates,"working with timezones (tz_localize, etc.)",2022:  W17,tz_localize|tz_convert,,
Pandas - File I/O,Formatting numeric output,2021:  W41,to_csv\(.*? float_format.*?\),,
Pandas - File I/O,Read Excel files,2019:  W04  2020:  W03  W06  2021:  W03  W04  W06  W07  W08  W09  W10  W11  W14  W15  W17  W18  W19  W22  W24  W25  W27  W28  W29  W33  W34  W35  W36  W37  W38  W43  W44  W45  W46  W47  W48  W50  W52  2022:  W06  W07  W08  W09  W10  W15  W16  W17  W19  W20  W22  W24,ExcelFile|read_excel,,
Pandas - File I/O,Read Excel files (dynamic sheets),2020:  W08  2021:  W21  W23  W33  W45  W46  W50  2022:  W07  W21,(?:read_excel.*? for )|(?:for .*?\:.*?read_excel),,
Pandas - File I/O,Write multiple tabs to Excel file,2020:  W03  2021:  W14  W20  W28,ExcelWriter,,
Pandas - Joining,append,2021:  W41,\.append\(,,
Pandas - Joining,concat,2020:  W01  W03  W07  W08  2021:  W03  W04  W12  W13  W25  W26  W28  W33  W43  W45  W46  W50  2022:  W07  W10  W12  W20  W21  W23,\.concat\(,,
Pandas - Joining,merge,2020:  W01  W03  W04  W06  W07  W08  2021:  W01  W04  W05  W06  W07  W08  W09  W10  W11  W12  W14  W15  W16  W17  W18  W19  W20  W22  W24  W25  W26  W27  W29  W34  W35  W36  W38  W39  W42  W45  W46  W47  W50  W52  2022:  W03  W04  W06  W07  W08  W09  W15  W16  W17  W19  W20  W24  W29,\.merge\(,,
Pandas - Joining,merge_asof,2021:  W08  2022:  W22,\.merge_asof\(,,
Pandas - Other,apply / map,2020:  W04  2021:  W10  W11  W16  W18  W42  2022:  W02  W06,\.apply|map\(,,
Pandas - Other,assign,2021:  W45  W46  W50  W51  W52  2022:  W03  W04  W06  W07  W09  W10  W11  W12  W13  W14  W15  W16  W17  W21  W22  W23  W29,\.assign\(,,
Pandas - Other,astype,2020:  W04  W06  W07  W08  W09  2021:  W06  W08  W09  W10  W12  W13  W14  W15  W16  W17  W19  W21  W23  W25  W27  W28  W30  W32  W35  W44  W45  W46  W48  W50  W51  2022:  W06  W07  W09  W12  W14  W17  W19  W21  W22  W24  W27  W28,\.astype\(,,
Pandas - Other,cut / qcut,2021:  W23  2022:  W05,\.cut|qcut\(,,
Pandas - Other,factorize,2021:  W51,\.factorize\(,,
Pandas - Other,fillna / ffill / bfill,2020:  W01  W03  2021:  W01  W12  W13  W24  W39  W42  W44  W47  W48  W50  W52  2022:  W11  W12  W16,fillna|ffill|bfill,,
Pandas - Other,reindex,2021:  W44,\.reindex\(,,
Pandas - Other,shift / diff,2021:  W08  W30  W41  W50  2022:  W09  W12,\.(?:shift|diff)\(,,
Pandas - Other,sort_values,2020:  W03  W05  2021:  W01  W05  W08  W13  W14  W15  W25  W26  W27  W30  W36  W38  W39  W41  W45  W50  W51  2022:  W09  W10  W11  W12  W13  W22,\.sort_values\(,,
Pandas - Reshaping,crosstab,2021:  W40,\.crosstab\(,,
Pandas - Reshaping,explode,2020:  W08  2021:  W07  W09  W11  W15  W19  W22  W24  W26  W29  W37  W45  W52  2022:  W06  W15  W22,\.explode\(,,
Pandas - Reshaping,extract,2019:  W04  2020:  W01  W04  W06  W08  W09  2021:  W09  W11  W15  W17  W19  W22  W25  W29  W35  W38  W39  W41  W48  W51  2022:  W06  W07  W10  W16  W18  W20  W24  W27  W29,\.str\.extract\(,,
Pandas - Reshaping,melt,2020:  W03  W08  W09  2021:  W03  W04  W06  W12  W14  W15  W16  W17  W27  W28  W34  W36  W43  W47  W48  W50  2022:  W03  W04  W05  W08  W10  W16  W18  W21  W29,\.melt\(,,
Pandas - Reshaping,pivot / pivot_table,2020:  W04  W08  2021:  W06  W15  W18  W23  W31  W39  W43  W44  W16  W18  W21,\.(?:pivot|pivot_table)\(,,
Pandas - Reshaping,stack,2021:  W07,\.stack\(,,
Pandas - Reshaping,transpose T,2022:  W07,\.(?:transpose\(|T),,
Pandas - Selection/slicing,drop,2020:  W03  W06  2021:  W08  W10  W12  W14  W15  W16  W17  W25  W43  W45  W46  W48  W50  2022:  W07  W08  W09  W14  W16  W17  W22  W24  W27,\.drop\(,,
Pandas - Selection/slicing,drop_duplicates,2021:  W05  W07  W10  W25  W29  W35  W45  2022:  W10  W22,\.drop_duplicates\(,,
Pandas - Selection/slicing,dropna,2020:  W08  W09  2021:  W08  W15  W16  W27  W48  2022:  W10  W16  W21,\.drop_na\(,,
Pandas - Selection/slicing,idmax / idmin,2021:  W24  W30  W36,\.(?:idxmax|idxmin),,
Pandas - Selection/slicing,query,2020:  W09  2022:  W08  W09  W14  W21  W22,\.query\(,,
Pandas - Selection/slicing,slicing a DataFrame,2019:  W04  2020:  W01  W02  W03  W04  W05  W07  W08  2021:  W01  W08  W09  W10  W12  W13  W14  W16  W17  W19  W20  W21  W22  W23  W24  W25  W27  W28  W29  W31  W33  W34  W35  W36  W39  W40  W45  W48  W50  W51  2022:  W05  W07  W08  W13  W19  W20  W23  W27,\.loc\[|\.iloc\[|\[.*?\],,1
Rounding,Basic,2020:  W03  W06  2021:  W02  W06  W08  W11  W13  W14  W20  W28  W30  W32  W34  W36  W38  W40  W42  W49  W51  2022:  W03  W04  W06  W07  W12  W13  W20,round\(,,
Rounding,Round Half Up,2021:  W09,round_half_up,,
String Functions,"Changing case (upper, lower, title, etc.)",2020:  W04  W08  2021:  W19  W22  W28  W29  W44  W51  W52  2022:  W06  W10  W20  W29,[^A-Za-z](?:capitalize|casefold|lower|swapcase|title|upper)\(,,
String Functions,"contains, startswith, endswith","2019:  W04  2020:  W04  2021:  W12  W22  W28  W29  W48  2022: 
W21",(?:contains|startswith|endswith\(,,
String Functions,Count matches,2020:  W01,count\('|\w,,
String Functions,findall,2021:  W52  2022:  W06,\.findall\(,,
String Functions,join,2020:  W06  2021:  W47  W52  2022:  W16,\.join\(,,
String Functions,ljust / rjust,2020:  W02,\.(?:ljust|rjust)\(,,
String Functions,match,2019:  W04  2021:  W12  2022:  W16,\.match\(,,
String Functions,replace,2019:  W04  2020:  W02  W04  W07  W08  2021:  W01  W02  W06  W12  W14  W19  W27  W28  W29  W34  W36  W38  W48  2022:  W04  W10  W12  W13  W19  W21  W22  W24,\.replace\([^\{],1,
String Functions,split,2021:  W01  W03  W04  W07  W09  W11  W14  W15  W16  W19  W21  W29  W45  2022:  W06  W22,\.split\(,,
String Functions,String slicing,2019:  W04  2020:  W08  2021:  W09  W10  W28  W33  W36  2022:  W14  W21,\[.*?\:.*?\],1,
String Functions,strip,2021:  W09  W13  W15  W16  W19  W21  W22  W28  W29  W43  W46  W52  2022:  W22,\.strip\(,,
numpy,"aggregate functions (e.g. sum, max)",2020:  W08,np\.(?:median|average|mean|std|var|nanmedian|nanmean|nanstd|nanvar|count_nonzero|prod|sum|nanprod|nansum|cumprod|cumsum|nancumprod|nancumsum|count|cumcount|nancumcount|nancount|maximum|fmax|amax|minimum|fmin|nanmin)\(,,
numpy,ceil / floor,2021:  W23  W47,"((?:from numpy import)(?:\,? ceil|\,? floor))|(np\.(?:ceil|floor)\()",,
numpy,where,2019:  W04  2020:  W03  W04  W09  2021:  W12  W14  W15  W16  W20  W28  W32  W33  W34  W35  W36  W39  W40  W41  W42  W43  W44  W47  W48  W50  2022:  W01  W04  W07  W08  W09  W12  W15  W16  W17  W20  W21  W22  W27,"(from numpy import,? where)|(np\.where\()",,
